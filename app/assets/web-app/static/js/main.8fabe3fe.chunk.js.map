{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","App","useForm","register","handleSubmit","errors","formState","data","a","post","response","console","log","error","onSubmit","name","placeholder","ref","required","htmlFor","title","message","subtitle","type","disabled","isSubmitting","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAMAA,IAAMC,SAASC,eAAiB,aAChCF,IAAMC,SAASE,eAAiB,eA2CjBC,MAzCf,WAAgB,IAAD,EACyCC,cAA9CC,EADK,EACLA,SAAUC,EADL,EACKA,aAAcC,EADnB,EACmBA,OAAQC,EAD3B,EAC2BA,UAD3B,4CAGb,WAAwBC,GAAxB,eAAAC,EAAA,+EAE2BX,IAAMY,KAAK,aAAcF,GAFpD,OAEUG,EAFV,OAGIC,QAAQC,IAAIF,GAHhB,gDAKIC,QAAQE,MAAR,MALJ,0DAHa,sBAYb,OACE,gCACE,iDAEA,8BACE,uBAAMC,SAAUV,GAjBT,8CAiBP,UACE,uBACEW,KAAK,QACLC,YAAY,QACZC,IAAKd,EAAS,CACZe,SAAU,eAGd,uBAAOC,QAAQ,QAAf,SAAwBd,EAAOe,OAASf,EAAOe,MAAMC,UAErD,uBAAON,KAAK,WAAWC,YAAY,WAAWC,IAAKd,MACnD,uBAAOgB,QAAQ,WAAf,SACGd,EAAOiB,UAAYjB,EAAOiB,SAASD,UAGtC,wBAAQE,KAAK,SAASC,SAAUlB,EAAUmB,aAA1C,2BC7BKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8fabe3fe.chunk.js","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios';\n\nimport './App.css';\n\naxios.defaults.xsrfCookieName = 'CSRF-TOKEN';\naxios.defaults.xsrfHeaderName = 'X-CSRF-Token';\n\nfunction App() {\n  const { register, handleSubmit, errors, formState } = useForm();\n\n  async function onSubmit(data) {\n    try {\n      const response = await axios.post('/api/books', data);\n      console.log(response);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Save a new book</h1>\n\n      <div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n            name=\"title\"\n            placeholder=\"Title\"\n            ref={register({\n              required: 'Required',\n            })}\n          />\n          <label htmlFor=\"title\">{errors.title && errors.title.message}</label>\n\n          <input name=\"subtitle\" placeholder=\"Subtitle\" ref={register()} />\n          <label htmlFor=\"subtitle\">\n            {errors.subtitle && errors.subtitle.message}\n          </label>\n\n          <button type=\"submit\" disabled={formState.isSubmitting}>\n            Save\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}